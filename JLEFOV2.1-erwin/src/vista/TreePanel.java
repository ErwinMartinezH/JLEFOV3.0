/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package vista;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;
import javax.swing.GroupLayout;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author Erik
 */
public class TreePanel extends JPanel {

    /**
     * Creates new form TreePanel
     */
    private TreeNodeDerivation raiz;
    public int offsetRoot = 0;
    public final JScrollPane bar;
    int maxAncho = 0;
    int maxLargo = 0;

    public TreePanel(TreeNodeDerivation raiz) {
        //this.setBackground(Color.BLACK);
        this.raiz = raiz;
        this.bar = new JScrollPane(this);
        this.bar.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        this.bar.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        //setBackground(Color.WHITE);
        if (raiz != null) {
            pintarNodo(g, 600, 60, raiz.getValue());
            parserTree(raiz, 600, 60, g);
            offsetRoot = 0;
            
            int maxAncho = 0;
            
            for(int i = 0 ; i<raiz.getChildren().size() ; i = i + 1){
                if(maxAncho <= raiz.getChildren().size()){
                    maxAncho = raiz.getChildren().size();
                }
            }

            this.setPreferredSize(new Dimension(maxAncho / 2 * 120, this.raiz.getChildren().size()/2 * 115));
            this.revalidate();
        }else{
            System.out.println("Raiz nula");
        }
    }

    public void pintarNodo(Graphics g, int x, int y, String texto){
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        BasicStroke bS = new BasicStroke(1.8f);
        g2.setStroke(bS);
        this.setBackground(Color.WHITE);
        //g2.drawRect(x, y, 20, 20);
        
        g2.setColor(Color.BLUE);
        g2.fillOval(x, y, 20, 20);
    
        g2.setColor(Color.BLACK);
        g2.drawOval(x , y , 20, 20);
        
        g2.setColor(Color.WHITE);
        g2.drawString(texto, x+5 , y+15);      
        g2.setColor(Color.BLACK);
    }

    public void parserTree(TreeNodeDerivation root, int x, int y, Graphics g){
        if(root == null){
        }else{
            TreeNodeDerivation nodeTMP = root.getChildren().get(offsetRoot);
           
            if(nodeTMP.getValue().length()-1 >= 2){
                int tmpX = x - (nodeTMP.getValue().length() * 20);
                y = y + 90;
        
                for(int iteratorString = 0 ; iteratorString < nodeTMP.getValue().length(); iteratorString = iteratorString + 1){
                    char c = nodeTMP.getValue().charAt(iteratorString);

                    if(Character.isUpperCase(c)){
                        int lineX = tmpX;
                        int lineY = y;
                        pintarNodo(g, tmpX, y, String.valueOf(c));
                        
                        offsetRoot = offsetRoot + 1;
                        parserTree(root, tmpX , y, g);
                        
                        g.drawLine(lineX+10, lineY, x+10, y-70);
                    }else{
                        if(!Character.isWhitespace(c)){
                            int lineX = tmpX;
                            int lineY = y;
                            
                            pintarNodo(g, tmpX, y, String.valueOf(c));
                            
                            g.drawLine(lineX+10, lineY, x+10, y-70);   
                        }

                    }
                    
                    tmpX = tmpX + 50;
                    
                }
            }else{
                g.drawLine(x+10, y+20, x+10, y+50);
                
                pintarNodo(g, x , y+50, nodeTMP.getValue());
                
            }      
                            
        }
    }

  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
}
